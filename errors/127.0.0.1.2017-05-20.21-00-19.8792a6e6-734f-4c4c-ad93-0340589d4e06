(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'f_type_user'"
p3
sS'layer'
p4
S'C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\applications\\Virtualizacion\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\n# Some imports\nfrom time import gmtime, strftime\nimport json\n\ndef user(): \n    print(auth())\n    return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n@auth.requires_login()\ndef index():\n    # id = auth.id  -> res = db(db.t_usuario.id == id ).select() -> res.f_type\n    #if es instruccional renderizar vista de instruccional ...\n    #return \n\n    res = db(db.t_program).select()\n    n = 0\n    res_n = 0\n    for row in res:\n        res_n=res_n+1\n    notificacion = db(db.t_notification.f_usuario_b == auth.user.id).select()\n    usuarios = []\n    for row in notificacion:\n        usuarios.append( db(db.t_usuario.id == row.f_usuario_a).select(db.t_usuario.f_first_name, distinct=False) )\n        n=n+1\n\n    usuarios_sistema = db(db.t_usuario).select()\n\n    return dict(query=res, length_query = res_n, notification = notificacion, length_notification = n, notification_emited = usuarios, users = usuarios_sistema, length_users = len(usuarios_sistema))\n\ndef error():\n    return dict()\n\n\n@auth.requires_login()\ndef create_notif():\n    user_emisor, user_receptor, titulo, contenido = auth.user.id, request.post_vars[\'user_receptor\'], request.post_vars[\'titulo\'], request.post_vars[\'contenido\']\n    select = db(db.t_usuario.f_first_name == user_receptor).select()\n    id_receptor = 0\n    for row in select:\n        id_receptor = row.id\n    db.t_notification.insert(\n        f_usuario_a = user_emisor,\n        f_usuario_b = id_receptor,\n        f_tittle = titulo,\n        f_viewed = False,\n        f_content = contenido\n        )    \n    return index()\n\n@auth.requires_login()\ndef insert():\n    user_name, name, last_name, user_type, email, password = request.post_vars[\'user_name\'],request.post_vars[\'name\'], request.post_vars[\'last_name\'], request.post_vars[\'user_type\'], request.post_vars[\'email\'], request.post_vars[\'password\']\n    db.t_usuario.insert(\n            f_username=user_name,\n            f_first_name=name,\n            f_last_name=last_name,           \n            f_email=email,\n            f_password=db.auth_user.password.requires[0](password)[0],\n            f_type_user=user_type,\n            f_notification="0"\n        )\n    db.auth_user.insert(\n            first_name=name,\n            last_name=last_name,           \n            email=email,\n            password=db.auth_user.password.requires[0](password)[0],           \n        )\n    return dict() \n\n@auth.requires_login()\ndef registrar_usuario():\n    return dict()\n\n@auth.requires_login()\ndef user_manage():\n    return dict()\n\n@auth.requires_login()\ndef course_manage():\n    form = SQLFORM.smartgrid(db.t_course,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef has_course_manage():\n    form = SQLFORM.smartgrid(db.t_has_course,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef register_user():\n    return dict()\n\n@auth.requires_login()\ndef dashboard():\n    return dict()\n\n@auth.requires_login()\ndef validar_form_recurso(form):\n    c = form.vars.f_name\n    t = form.vars.f_type\n    f = form.vars.f_format\n    d = form.vars.f_description\n    c = c.strip()\n    t = t.strip()\n    f = f.strip()\n    d = d.strip()\n    if c=="" or t=="" or f=="" or d=="":\n        form.errors.f_name = \'todos los campos deben estar llenos\'\n        form.errors.f_type = \'todos los campos deben estar llenos\'\n        form.errors.f_format = \'todos los campos deben estar llenos\'\n        form.errors.f_description = \'todos los campos deben estar llenos\'\n\n@auth.requires_login()\ndef validar_form_archivo(form):\n    c = form.vars.f_name\n    d = form.vars.f_description\n    a = form.vars.f_file\n    c = c.strip()\n    d = d.strip()\n    a = a.strip()\n    if c=="" or d=="" or a=="":\n        form.errors.f_name = \'todos los campos deben estar llenos\'\n        form.errors.f_description = \'todos los campos deben estar llenos\'\n        #form.vars.f_file = \'todos los campos deben estar llenos\'\n\n@auth.requires_login()\ndef recurso():\n    #form =db().select(db.t_resource.f_name, db.t_resource.f_code_course)\n    form = SQLFORM(\n        db.t_resource,\n        fields=[\'f_name\',\'f_code_course\',\'f_responsable\',\'f_type\',\'f_format\',\'f_description\',\'f_is_planilla\'],\n        deletable=True)\n    if form.process(onvalidation=validar_form_recurso).accepted:\n        response.flash = \'Recurso aceptado\'\n    elif form.errors:\n        response.flash = \'Error de formulario\'\n    return dict(form=form)\n\n@auth.requires_login()\ndef display_planillas():\n    form = SQLFORM.smartgrid(db.t_resource, constraints = dict(t_resource = db.t_resource.f_is_planilla == True),\n        onupdate=auth.archive,\n        deletable=False,\n        editable=False,\n        searchable=False,\n        create=False,\n        csv=False,\n        showbuttontext=False)\n    return locals()\n\n\n\n@auth.requires_login()\ndef display_resources():\n    query = db.t_resource.f_is_planilla == False\n    form = SQLFORM.smartgrid(\n        db.t_resource,\n        constraints = dict(t_resource = query),\n        onupdate=auth.archive,\n        deletable=False,\n        editable=False,\n        searchable=False,\n        create=False,\n        csv=False,\n        showbuttontext=False\n        )\n    return locals()\n\n\n@auth.requires_login()\ndef verificar_planillas():\n    id_resource = request.post_vars[\'id_resource\']\n    row = db(db.t_resource.id == id_resource).select().first()\n    row.update_record(f_is_verificado=True)\n    redirect(URL(\'display_planillas\'))  \n    #return locals()\n\n@auth.requires_login()\ndef verificar_resources():\n    id_resource = request.post_vars[\'id_resource\']\n    row = db(db.t_resource.id == id_resource).select().first()\n    row.update_record(f_is_verificado=True)\n    redirect(URL(\'display_resources\'))  \n    #return locals()\n\n@auth.requires_login()\ndef desverificar_resources():\n    id_resource = request.post_vars[\'id_resource\']\n    comentario = request.post_vars[\'comment\']\n    row = db(db.t_resource.id == id_resource).select().first()\n    row.update_record(f_is_verificado=False)\n\n    course = db.t_comments.insert(\n        recurso = id_resource,\n        texto = comentario,\n    )\n\n    redirect(URL(\'display_resources\'))  \n    #return locals()\n\n\ndef display_file_form():\n    record = db.t_file(request.args(0))\n    form = SQLFORM(db.t_file, record, deletable=True,\n                  upload=URL(\'download\'))\n\n    if form.process(onvalidation=validar_form_archivo).accepted:\n       response.flash = \'form accepted\'\n    elif form.errors:\n       response.flash = \'form has errors\'\n    return dict(form=form)\n\ndef display_files():\n    form = SQLFORM.smartgrid(db.t_file,onupdate=auth.archive)\n    return locals()\n    \n@auth.requires_login()\ndef program_manage():\n    return dict()\n\n@auth.requires_login()\ndef program_creator():\n    program_type = request.post_vars[\'program_type\']\n    program_name = ""\n\n    if (program_type == "carreraLarga"):\n        program_name = "Carrera Larga"\n    elif (program_type == "carreraCorta"):\n        program_name = "Carrera Corta"\n    elif (program_type == "postgrado"):\n        program_name = "Postgrado"\n    elif (program_type == "diplomado"):\n        program_name = "Diplomado"\n    elif (program_type == "curso"):\n        program_name = "Curso"\n    elif (program_type == "programa"):\n        program_name = "Programa"\n\n    data = {\'program_type\': program_type, \'program_name\': program_name}\n    return data\n\n@auth.requires_login()\ndef program_creator_courses():\n    program_type = request.get_vars[\'type\']\n    duration = int(request.post_vars[\'years\'])\n    modality = request.post_vars[\'modality\']\n    name = request.post_vars[\'name\']\n    code = request.post_vars[\'code\']\n\n   # nulo = db(db.t_course.f_code == code).select()\n   # if nulo:\n\n   # print(nulo)\n   # print("HOLA")\n\n    # Getting size\n    size = 0\n    if (modality==\'trimestral\'):\n        size = 3\n    elif (modality==\'semestral\'):\n        size = 6\n    elif (modality==\'anual\'):\n        size = 12\n\n    # Create Database Entries\n    if (program_type in (\'carreraLarga\', \'carreraCorta\', \'postgrado\')):\n        # Nivel de anidacion I\n        level_one_id = db.t_program.insert(\n            f_name = name,\n            f_modality = modality,\n            f_code = code,\n            f_duration = duration,\n            f_level = 0\n        )\n\n        complete_duration = int(duration)*12/size\n\n        programsIDs = list()\n\n        for i in range(0, complete_duration):\n            level_two_id = db.t_program.insert(\n                f_name = name + \' - \' + modality + \' - \' + str(i),\n                f_modality = None,\n                f_code = code,\n                f_duration = size,\n                f_level = 1\n            )\n\n            db.t_has_program.insert(\n                f_program_a = level_one_id,\n                f_program_b = level_two_id\n            )\n\n            programsIDs.append(level_two_id)\n    elif (program_type in (\'diplomado\', \'curso\') ):\n        complete_duration = int(duration)*12/size\n\n        # Nivel de anidacion 0 \n        level_one_id = db.t_program.insert(\n            f_name = name,\n            f_modality = modality,\n            f_code = code,\n            f_duration = duration\n        )\n        programsIDs.append(level_one_id)\n    elif (program_type == \'programa\'):\n        # Nivel de anidacion variable\n        complete_duration = int(duration)*12/size\n        pass\n\n    return {\'duration\': complete_duration, \'size\': size, \'modality\' : modality, \'programs\': programsIDs}\n\n@auth.requires_login()\ndef save_course():\n    program = request.post_vars[\'program\']\n    course_code = request.post_vars[\'course_code\']\n    course_name = request.post_vars[\'course_name\']\n    message = \'\'\n    status = False\n    \n    # DB Inserts\n    validate = False\n    sanity_check_course = db(db.t_course.f_code == course_code).select()\n\n    for row in sanity_check_course:\n        validate = True\n\n    if ( not validate ):\n        print("This case is triggered")\n        course = db.t_course.insert(\n            f_code = course_code,\n            f_name = course_name,\n        )\n    else:\n        course = sanity_check_course[0]\n\n    has_course = db.t_has_course.insert(\n        f_program_has = program,\n        f_course_has = course\n    );\n\n    status = has_course != None and course != None\n\n    data = {\'course\': course, \'has_course\': has_course, \'course_name\': course_name, \'status\': status}\n    return data\n\n\n@auth.requires_login()\ndef project_manage():\n    return dict()\n\n\n@auth.requires_login()\ndef project_asign_responsibles():\n    codigo = request.get_vars[\'codigo\']\n    data = list()\n    courses = db(db.t_has_course.f_program_has.belongs(db.t_program.f_code == codigo)).select()\n    for course in courses:\n        data.append(db(db.t_course.id == course.f_course_has).select())\n    return dict(courses_ = data)\n\n\n@auth.requires_login()\ndef get_user_names():\n    usernames = db(db.auth_user).select(db.auth_user.first_name, db.auth_user.last_name)\n    names = \'\';\n    for name in usernames:\n        names = names + str(name[\'auth_user.first_name\']) + \' \' + str(name[\'auth_user.last_name\']) + \'|\'\n    data = {\'usernames\': names}\n    return data\n\n@auth.requires_login()\ndef profesor():\n    return dict()\n\n@auth.requires_login()\ndef disenador():\n    return dict()\n\n@request.restful()\ndef api():\n    response.view = \'generic.\'+request.extension\n    def GET(*args,**vars):\n        patterns = \'auto\'\n        parser = db.parse_as_rest(patterns,args,vars)\n        if parser.status == 200:\n            return dict(content=parser.response)\n        else:\n            raise HTTP(parser.status,parser.error)\n    def POST(table_name,**vars):\n        return db[table_name].validate_and_insert(**vars)\n    def PUT(table_name,record_id,**vars):\n        return db(db[table_name]._id==record_id).update(**vars)\n    def DELETE(table_name,record_id):\n        return db(db[table_name]._id==record_id).delete()\n    return dict(GET=GET, POST=POST, PUT=PUT, DELETE=DELETE)\nresponse._vars=response._caller(api)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\applications\\Virtualizacion\\controllers/default.py", line 400, in <module>\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\globals.py", line 380, in f\n    res = rest_action(*request.args, **request.vars)\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\applications\\Virtualizacion\\controllers/default.py", line 388, in GET\n    parser = db.parse_as_rest(patterns,args,vars)\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 782, in parse_as_rest\n    count = dbset.count()\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2010, in count\n    return db._adapter.count(self.query, distinct)\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1321, in count\n    self.execute(self._count(query, distinct))\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1308, in _count\n    sql_w = \' WHERE \' + self.expand(query)\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\user\\Documents\\universidad\\desarrollo de software\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'f_type_user\'\n'
p11
s.