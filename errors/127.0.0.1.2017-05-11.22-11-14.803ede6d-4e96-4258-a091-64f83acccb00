(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'Table'"
p3
sS'layer'
p4
S'C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\applications\\Virtualizacion\\controllers/api_rest.py'
p5
sS'code'
p6
S'#GENERAL FUNCTIONS\n\ndef validar_form_recurso(form):\n    c = form.vars.f_name\n    t = form.vars.f_type\n    f = form.vars.f_format\n    d = form.vars.f_description\n    c = c.strip()\n    t = t.strip()\n    f = f.strip()\n    d = d.strip()\n    if c=="" or t=="" or f=="" or d=="":\n        form.errors.f_name = \'todos los campos deben estar llenos\'\n        form.errors.f_type = \'todos los campos deben estar llenos\'\n        form.errors.f_format = \'todos los campos deben estar llenos\'\n        form.errors.f_description = \'todos los campos deben estar llenos\'\n\ndef validar_form_archivo(form):\n    c = form.vars.f_name\n    d = form.vars.f_description\n    a = form.vars.f_file\n    c = c.strip()\n    d = d.strip()\n    a = a.strip()\n    if c=="" or d=="" or a=="":\n        form.errors.f_name = \'todos los campos deben estar llenos\'\n        form.errors.f_description = \'todos los campos deben estar llenos\'\n\n#API_REST\n\n#GETS\n@auth.requires_login()\n@request.restful()\ndef get_users():\n    def GET(*args, **vars):\n        usuarios_sistema = db(db.t_usuario).select()\n        return dict(users = usuarios_sistema, length_users = len(usuarios_sistema))\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef get_programs_new():\n    def GET(*args, **vars):\n        rows = db().select(db.t_program.ALL, db.t_project.ALL,\n                       left=db.t_program.on(db.t_program == db.t_project.f_program))\n        for row in rows:\n            print(row)\n       # programs = db(db.t_program).select()\n       # projects = db(db.t_project).select()        \n       # data = list()\n       # for program in programs:\n       #     data.append()\n        return dict()\n    return locals()\n\n\n@auth.requires_login()\n@request.restful()\ndef get_notifications():\n    def GET(*args, **vars):\n        notificacion = db(db.t_notification.f_usuario_b == auth.user.id).select()\n        return dict(notification = notificacion, length_notification = len(notificacion) )\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef get_programs():\n    def GET(*args, **vars):\n        res = db(db.t_program).select()\n        return dict(programs = res, length_users = len(res))\n    return locals()\n\n@auth.requires_login()\n@request.restful()     # Revisar - KEIBER - EFRA\ndef get_files():\n    def GET(*args, **vars): \n        files = db(db.t_file).select()\n        return dict(users = files, length_users = len(files))\n\n    def POST(*args, **vars):\n        return dict()\n    return locals()\n\n@auth.requires_login()\n@request.restful()     \ndef get_project_responsibles():\n    def GET(codigo_request): \n        codigo = codigo_request\n        data = list()\n        courses = db(db.t_has_course.f_program_has.belongs(db.t_program.f_code == codigo)).select()\n        for course in courses:\n            data.append(db(db.t_course.id == course.f_course_has).select())\n        return dict(courses_ = data)\n\n    def POST(*args, **vars):\n        return dict()\n    return locals()\n\n\n#GETS - REVISION -----------------------------------------------------------------------------\n@auth.requires_login()\n@request.restful()\ndef get_planillas(): #KEIBER - EFRA   - REVISAR SI CAMBIAR\xc3\x81 A SOLO BUSQUEDA EN BD\n    def GET(*args, **vars):\n        form = SQLFORM.smartgrid(db.t_resource, constraints = dict(t_resource = db.t_resource.f_is_planilla == True),\n            onupdate=auth.archive,\n            deletable=False,\n            editable=False,\n            searchable=False,\n            create=False,\n            csv=False,\n            showbuttontext=False)\n        return locals()\n    def POST(*args, **vars):\n        return dict()\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef get_resources(): #KEIBER - EFRA  - REVISAR SI CAMBIAR\xc3\x81 A SOLO BUSQUEDA EN BD\n    def GET(*args, **vars):\n        query = db.t_resource.f_is_planilla == False\n        form = SQLFORM.smartgrid(\n            db.t_resource,\n            constraints = dict(t_resource = query),\n            onupdate=auth.archive,\n            deletable=False,\n            editable=False,\n            searchable=False,\n            create=False,\n            csv=False,\n            showbuttontext=False\n            )\n        return locals()\n    def POST(*args, **vars):\n        return dict()\n    return locals()\n\n#FIN GETS - REVISION ------------------------------------------------------------------------------------\n\n\n# POST\n@auth.requires_login()\n@request.restful()\ndef create_notification():\n    def GET(*args, **vars):\n        return dict()\n    def POST(user_receptor_request, titulo_request, contenido_request): #NOTA: ESTA REQUIERE UN AUTH \n        user_emisor, user_receptor, titulo, contenido = auth.user.id, user_receptor_request, titulo_request, contenido_request\n        select = db(db.t_usuario.f_first_name == user_receptor).select()\n        id_receptor = 0\n\n        for row in select:\n            id_receptor = row.id\n        try:            \n            db.t_notification.insert(\n                f_usuario_a = user_emisor,\n                f_usuario_b = id_receptor,\n                f_tittle = titulo,\n                f_viewed = False,\n                f_content = contenido\n                )             \n        except:\n            db.rollback()\n            return dict(status = "500", msg= "Error en el servidor", contenido = "Error en el servidor")\n        else:\n            db.commit()\n            return dict(status = "200", msg= "Operaci\xc3\xb3n exitosa", contenido = "Se ha creado la notificaci\xc3\xb3n "+titulo+" correctamente")\n\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef create_user():\n    def GET(*args, **vars):\n        return dict()\n    def POST(user_name, name, last_name, user_type, email, password): \n        #user_name, name, last_name, user_type, email, password = request.post_vars[\'user_name\'],request.post_vars[\'name\'], request.post_vars[\'last_name\'], request.post_vars[\'user_type\'], request.post_vars[\'email\'], request.post_vars[\'password\']\n        try:\n            db.t_usuario.insert(\n                    f_username=user_name,\n                    f_first_name=name,\n                    f_last_name=last_name,           \n                    f_email=email,\n                    f_password=db.auth_user.password.requires[0](password)[0],\n                    f_type_user=user_type,\n                    f_notification="0"\n                )\n            db.auth_user.insert(\n                    first_name=name,\n                    last_name=last_name,           \n                    email=email,\n                    password=db.auth_user.password.requires[0](password)[0],           \n                )  \n        except:\n            db.rollback()\n            return dict(status = "500", msg= "Error en el servidor", contenido = "Error en el servidor")\n        else:    \n            db.commit()     \n            return dict(status = "200", msg= "Operaci\xc3\xb3n exitosa", contenido = "Se ha creado el usuario "+user_name+" correctamente")\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef verificar_planillas():\n    def GET(*args, **vars):        \n        return dict()\n\n    def POST(id_resource):\n        try:\n            row = db(db.t_resource.id == id_resource).select().first()\n            row.update_record(f_is_verificado=True)\n        except:\n            db.rollback()\n            return dict(status = "500", msg= "Error en el servidor", contenido = "Error en el servidor")\n        else:    \n            db.commit()     \n            return dict(status = "200", msg= "Operaci\xc3\xb3n exitosa", contenido = "Se ha actualizado el recurso a verificado")\n    return locals()\n\n#REVISAR ESTA ------------------------------------------------------\n@auth.requires_login()\n@request.restful()\ndef verificar_resources():\n    def GET(*args, **vars):        \n        return dict()\n\n    def POST(id_resource):\n        row = db(db.t_resource.id == id_resource).select().first()\n        row.update_record(f_is_verificado=True)\n        return dict()\n    return locals()\n#--------------------------------------------------------------------\n@auth.requires_login()\n@request.restful()\ndef desverificar_resources():\n    def GET(*args, **vars):        \n        return dict()\n\n    def POST(id_resource, comment):\n        try:\n            comentario = comment\n            row = db(db.t_resource.id == id_resource).select().first()\n            row.update_record(f_is_verificado=False)\n\n            course = db.t_comments.insert(\n                recurso = id_resource,\n                texto = comentario,\n            )\n        except:\n            db.rollback()\n            return dict(status = "500", msg= "Error en el servidor", contenido = "Error en el servidor")\n        else:    \n            db.commit()     \n            return dict(status = "200", msg= "Operaci\xc3\xb3n exitosa", contenido = "Se ha actualizado el recurso a desverificado")\n    return locals()\n\n#@auth.requires_login()\n#@request.restful()\n#def create_program():\n#    def GET(*args, **vars):\n#        program_name = ""\n#\n#        if (program_type == "carreraLarga"):\n#            program_name = "Carrera Larga"\n#        elif (program_type == "carreraCorta"):\n#            program_name = "Carrera Corta"\n#        elif (program_type == "postgrado"):\n#            program_name = "Postgrado"\n#        elif (program_type == "diplomado"):\n#            program_name = "Diplomado"\n#        elif (program_type == "curso"):\n#            program_name = "Curso"\n#        elif (program_type == "programa"):\n#            program_name = "Programa"\n#        data = {\'program_type\': program_type, \'program_name\': program_name}\n#        return data   \n#    def POST(program_type):\n#        return dict()\n#\n#    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef create_program_courses():\n    def GET(*args, **vars):        \n        return dict()\n\n    def POST(program_type, duration, modality, name, code):\n\n       # nulo = db(db.t_course.f_code == code).select()\n       # if nulo:\n\n       # print(nulo)\n       # print("HOLA")\n\n        # Getting size\n        try:\n            size = 0\n            if (modality==\'trimestral\'):\n                size = 3\n            elif (modality==\'semestral\'):\n                size = 6\n            elif (modality==\'anual\'):\n                size = 12\n\n            # Create Database Entries\n            if (program_type in (\'carreraLarga\', \'carreraCorta\', \'postgrado\')):\n                # Nivel de anidacion I\n                level_one_id = db.t_program.insert(\n                    f_name = name,\n                    f_modality = modality,\n                    f_code = code,\n                    f_duration = duration,\n                    f_level = 0\n                )\n\n                complete_duration = int(duration)*12/size\n\n                programsIDs = list()\n\n                for i in range(0, complete_duration):\n                    level_two_id = db.t_program.insert(\n                        f_name = name + \' - \' + modality + \' - \' + str(i),\n                        f_modality = None,\n                        f_code = code,\n                        f_duration = size,\n                        f_level = 1\n                    )\n\n                    db.t_has_program.insert(\n                        f_program_a = level_one_id,\n                        f_program_b = level_two_id\n                    )\n\n                    programsIDs.append(level_two_id)\n            elif (program_type in (\'diplomado\', \'curso\') ):\n                complete_duration = int(duration)*12/size\n\n                # Nivel de anidacion 0\n                level_one_id = db.t_program.insert(\n                    f_name = name,\n                    f_modality = modality,\n                    f_code = code,\n                    f_duration = duration\n                )\n                programsIDs.append(level_one_id)\n            elif (program_type == \'programa\'):\n                # Nivel de anidacion variable\n                complete_duration = int(duration)*12/size\n                pass\n        except:\n            db.rollback()\n            return dict(status = "500", msg= "Error en el servidor", contenido = "Error en el servidor")\n        else:    \n            db.commit()     \n            return dict(status = "200", msg= "Operaci\xc3\xb3n exitosa", contenido = dict(duration = complete_duration, size = size, modality = modality, programs = programsIDs))\n    return locals()\n\n@auth.requires_login()\n@request.restful()\ndef save_course():\n    def GET(*args, **vars):        \n        return dict()\n\n    def POST(program, course_code, course_name):\n        try:\n            message = \'\'\n            status = False\n            \n            # DB Inserts\n            validate = False\n            sanity_check_course = db(db.t_course.f_code == course_code).select()\n\n            for row in sanity_check_course:\n                validate = True\n\n            if ( not validate ):\n                print("This case is triggered")\n                course = db.t_course.insert(\n                    f_code = course_code,\n                    f_name = course_name,\n                )\n            else:\n                course = sanity_check_course[0]\n\n            has_course = db.t_has_course.insert(\n                f_program_has = program,\n                f_course_has = course\n            );\n\n            status = has_course != None and course != None\n        except:\n            db.rollback()\n            return dict(status = "500", msg= "Error en el servidor", contenido = "Error en el servidor")\n        else:    \n            db.commit()     \n            return dict(status = "200", msg= "Operaci\xc3\xb3n exitosa", contenido = dict(course = course, has_course = has_course, course_name = course_name, status= status))\n    return locals()\nresponse._vars=response._caller(get_programs_new)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\applications\\Virtualizacion\\controllers/api_rest.py", line 400, in <module>\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\tools.py", line 4241, in f\n    return action(*a, **b)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\globals.py", line 380, in f\n    res = rest_action(*request.args, **request.vars)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\applications\\Virtualizacion\\controllers/api_rest.py", line 45, in GET\n    left=db.t_program.on(db.t_program == db.t_project.f_program))\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1191, in _select\n    sql_t += \' %s %s\' % (command, t)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\objects.py", line 1126, in __str__\n    return str(self.db._adapter.expand(self, self.type))\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 921, in ON\n    return (\'%s ON %s\') % (self.expand(table_rname), self.expand(second))\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Disco D\\respaldo ricky\\Universidad\\Semestre 7\\lab general\\web2py_sprint2\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1442, in represent\n    return str(long(obj))\nTypeError: long() argument must be a string or a number, not \'Table\'\n'
p11
s.